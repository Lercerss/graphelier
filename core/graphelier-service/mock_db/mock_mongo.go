// Code generated by MockGen. DO NOT EDIT.
// Source: graphelier-service/db/mongo.go

package mock_db

import (
	gomock "github.com/golang/mock/gomock"
	models "graphelier/core/graphelier-service/models"
	reflect "reflect"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return _m.recorder
}

// GetOrderbook mocks base method
func (_m *MockDatastore) GetOrderbook(instrument string, timestamp uint64) (*models.Orderbook, error) {
	ret := _m.ctrl.Call(_m, "GetOrderbook", instrument, timestamp)
	ret0, _ := ret[0].(*models.Orderbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderbook indicates an expected call of GetOrderbook
func (_mr *MockDatastoreMockRecorder) GetOrderbook(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetOrderbook", reflect.TypeOf((*MockDatastore)(nil).GetOrderbook), arg0, arg1)
}

// GetMessagesByTimestamp mocks base method
func (_m *MockDatastore) GetMessagesByTimestamp(instrument string, timestamp uint64) ([]*models.Message, error) {
	ret := _m.ctrl.Call(_m, "GetMessagesByTimestamp", instrument, timestamp)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByTimestamp indicates an expected call of GetMessagesByTimestamp
func (_mr *MockDatastoreMockRecorder) GetMessagesByTimestamp(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMessagesByTimestamp", reflect.TypeOf((*MockDatastore)(nil).GetMessagesByTimestamp), arg0, arg1)
}

// GetMessagesWithPagination mocks base method
func (_m *MockDatastore) GetMessagesWithPagination(instrument string, paginator *models.Paginator) ([]*models.Message, error) {
	ret := _m.ctrl.Call(_m, "GetMessagesWithPagination", instrument, paginator)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesWithPagination indicates an expected call of GetMessagesWithPagination
func (_mr *MockDatastoreMockRecorder) GetMessagesWithPagination(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMessagesWithPagination", reflect.TypeOf((*MockDatastore)(nil).GetMessagesWithPagination), arg0, arg1)
}

// GetSingleMessage mocks base method
func (_m *MockDatastore) GetSingleMessage(instrument string, sodOffset int64) (*models.Message, error) {
	ret := _m.ctrl.Call(_m, "GetSingleMessage", instrument, sodOffset)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleMessage indicates an expected call of GetSingleMessage
func (_mr *MockDatastoreMockRecorder) GetSingleMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetSingleMessage", reflect.TypeOf((*MockDatastore)(nil).GetSingleMessage), arg0, arg1)
}

// GetInstruments mocks base method
func (_m *MockDatastore) GetInstruments() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetInstruments")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstruments indicates an expected call of GetInstruments
func (_mr *MockDatastoreMockRecorder) GetInstruments() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetInstruments", reflect.TypeOf((*MockDatastore)(nil).GetInstruments))
}

// RefreshCache mocks base method
func (_m *MockDatastore) RefreshCache() error {
	ret := _m.ctrl.Call(_m, "RefreshCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshCache indicates an expected call of RefreshCache
func (_mr *MockDatastoreMockRecorder) RefreshCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RefreshCache", reflect.TypeOf((*MockDatastore)(nil).RefreshCache))
}

// GetSingleOrderMessages mocks base method
func (_m *MockDatastore) GetSingleOrderMessages(instrument string, SODTimestamp int64, EODTimestamp int64, orderID int64) ([]*models.Message, error) {
	ret := _m.ctrl.Call(_m, "GetSingleOrderMessages", instrument, SODTimestamp, EODTimestamp, orderID)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleOrderMessages indicates an expected call of GetSingleOrderMessages
func (_mr *MockDatastoreMockRecorder) GetSingleOrderMessages(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetSingleOrderMessages", reflect.TypeOf((*MockDatastore)(nil).GetSingleOrderMessages), arg0, arg1, arg2, arg3)
}

// GetTopOfBookByInterval mocks base method
func (_m *MockDatastore) GetTopOfBookByInterval(instrument string, startTimestamp uint64, endTimestamp uint64, maxCount int64) ([]*models.Point, error) {
	ret := _m.ctrl.Call(_m, "GetTopOfBookByInterval", instrument, startTimestamp, endTimestamp, maxCount)
	ret0, _ := ret[0].([]*models.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopOfBookByInterval indicates an expected call of GetTopOfBookByInterval
func (_mr *MockDatastoreMockRecorder) GetTopOfBookByInterval(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetTopOfBookByInterval", reflect.TypeOf((*MockDatastore)(nil).GetTopOfBookByInterval), arg0, arg1, arg2, arg3)
}

// GetMessagesWithinInterval mocks base method
func (_m *MockDatastore) GetMessagesWithinInterval(instrument string, startTimestamp uint64, endTimestamp uint64) ([]*models.Message, error) {
	ret := _m.ctrl.Call(_m, "GetMessagesWithinInterval", instrument, startTimestamp, endTimestamp)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesWithinInterval indicates an expected call of GetMessagesWithinInterval
func (_mr *MockDatastoreMockRecorder) GetMessagesWithinInterval(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetMessagesWithinInterval", reflect.TypeOf((*MockDatastore)(nil).GetMessagesWithinInterval), arg0, arg1, arg2)
}
